package writer

import (
	"encoding/csv"
	"fmt"
	"log"
	"os"
	"strconv"
	"time"

	"github.com/jtrotsky/spate/vend"
)

// SalesReport aims to mimic the report generated by
// exporting Vend sales history.
func SalesReport(registers *[]vend.Register, users *[]vend.User, sales *[]vend.Sale, tz string) error {

	// Create blank CSV file to be written to.
	// File name will be the current time in unixtime.
	fname := fmt.Sprintf("vend_sales_history_%v.csv", time.Now().Unix())
	f, err := os.Create(fmt.Sprintf("./%s", fname))
	if err != nil {
		log.Fatalf("Error creating CSV file: %s", err)
	}
	// Ensure file closes at end.
	defer f.Close()

	w := csv.NewWriter(f)

	var headerLine []string
	headerLine = append(headerLine, "Sale Date")
	headerLine = append(headerLine, "Invoice Number")
	headerLine = append(headerLine, "Line Type")
	headerLine = append(headerLine, "Customer Code")
	headerLine = append(headerLine, "Customer Name")
	headerLine = append(headerLine, "Sale Note")
	headerLine = append(headerLine, "Quantity")
	headerLine = append(headerLine, "Price")
	headerLine = append(headerLine, "Tax")
	headerLine = append(headerLine, "Discount")
	headerLine = append(headerLine, "Loyalty")
	headerLine = append(headerLine, "Total")
	headerLine = append(headerLine, "Paid")
	headerLine = append(headerLine, "Details")
	headerLine = append(headerLine, "Register")
	headerLine = append(headerLine, "User")
	headerLine = append(headerLine, "Status")
	headerLine = append(headerLine, "Sku")
	headerLine = append(headerLine, "Account Code")
	headerLine = append(headerLine, "Purchasing Code")

	w.Write(headerLine)

	for _, sale := range *sales {

		// Prepare data to be written to CSV.

		// Load store's timezone as location.
		loc, _ := time.LoadLocation(tz)
		if err != nil {
			fmt.Printf("Error loading timezone as location: %s", err)
		}

		// Default Vend timedate layout.
		const longForm = "2006-01-02T15:04:05Z07:00"
		t, err := time.ParseInLocation(longForm, *sale.SaleDate, loc)
		if err != nil {
			log.Fatalf("Error parsing time into deafult timestamp: %s", err)
		}

		// Time string with timezone removed.
		timeStr := t.String()[0:19]

		var invoiceNumber string
		if sale.InvoiceNumber != nil {
			invoiceNumber = *sale.InvoiceNumber
		}

		// TODO: Get customer info for:
		// customerCode
		// customerName

		// Sale not wrapped in quote marks.
		var saleNote string
		if sale.Note != nil {
			saleNote = fmt.Sprintf("%q", *sale.Note)
		}

		// Add up the total quantities of each product line item.
		var totalQuantity float64
		for _, product := range *sale.LineItems {
			totalQuantity += *product.Quantity
		}
		totalQuantityStr := strconv.FormatFloat(totalQuantity, 'f', -1, 64)

		// Sale subtotal.
		totalPrice := strconv.FormatFloat(*sale.TotalPrice, 'f', -1, 64)
		// Sale tax.
		totalTax := strconv.FormatFloat(*sale.TotalTax, 'f', -1, 64)
		// Sale total (subtotal plus tax).
		total := strconv.FormatFloat((*sale.TotalPrice + *sale.TotalTax), 'f', -1, 64)

		// Add up the total quantities of each product line item.
		// TODO: Confirm sum of line items plus sale total..
		var totalDiscount float64
		for _, product := range *sale.LineItems {
			totalDiscount += *product.DiscountTotal
		}
		totalDiscountStr := strconv.FormatFloat(totalDiscount, 'f', -1, 64)
		// Total loyalty on sale.
		totalLoyaltyStr := strconv.FormatFloat(*sale.TotalLoyalty, 'f', -1, 64)

		// saleDetails
		// TODO: Confirm what this is.

		// TODO: Check how to see deleted registers.
		// should use deleted user names anyway, but with brackets maybe?
		var registerName string
		for _, register := range *registers {
			if *sale.RegisterID == *register.ID {
				registerName = *register.Name
			} else {
				registerName = "<Deleted Register>"
			}
		}

		// TODO: Check whether deleted users show.
		var userName string
		for _, user := range *users {
			if *sale.UserID == *user.ID {
				userName = *user.DisplayName
			} else {
				userName = "<Deleted User>"
			}
		}

		var saleStatus string
		if sale.Status != nil {
			saleStatus = *sale.Status
		}

		var record []string
		record = append(record, timeStr)          // Date
		record = append(record, invoiceNumber)    // Receipt Number
		record = append(record, "Sale")           // Line Type
		record = append(record, "")               // Customer Code
		record = append(record, "")               // Customer Name
		record = append(record, saleNote)         // Note
		record = append(record, totalQuantityStr) // Quantity
		record = append(record, totalPrice)       // Subtotal
		record = append(record, totalTax)         // Sales Tax
		record = append(record, totalDiscountStr) // Discount
		record = append(record, totalLoyaltyStr)  // Loyalty
		record = append(record, total)            // Sale total
		record = append(record, "")               // Paid
		record = append(record, "")               // Details
		record = append(record, registerName)     // Register
		record = append(record, userName)         // User
		record = append(record, saleStatus)       // Status
		record = append(record, "")               // Sku
		record = append(record, "")               // AccountCodeSale
		record = append(record, "")               // AccountCodePurchase
		w.Write(record)

		for _, product := range *sale.LineItems {

			quantity := strconv.FormatFloat(*product.Quantity, 'f', -1, 64)
			price := strconv.FormatFloat(*product.Price, 'f', -1, 64)
			tax := strconv.FormatFloat(*product.Tax, 'f', -1, 64)
			discount := strconv.FormatFloat(*product.Discount, 'f', -1, 64)
			loyalty := strconv.FormatFloat(*product.LoyaltyValue, 'f', -1, 64)
			total := strconv.FormatFloat(((*product.Price + *product.Tax) * *product.Quantity), 'f', -1, 64)

			// TODO: Download products to get name/handle/sku info.
			// name := *product.Name
			// sku := *product.Sku

			productRecord := record
			productRecord[0] = ""          // Sale Date
			productRecord[1] = ""          // Invoice Number
			productRecord[2] = "Sale Line" // Line Type
			productRecord[3] = ""          // Customer Code Code
			productRecord[4] = ""          // Customer Name Name
			productRecord[5] = ""          // Note TODO: line note from the product?
			productRecord[6] = quantity    // Quantity
			productRecord[7] = price       // Subtotal
			productRecord[8] = tax         // Sales Tax
			productRecord[9] = discount    // Discount
			productRecord[10] = loyalty    // Loyalty
			productRecord[11] = total      // Total
			productRecord[12] = ""         // Paid
			productRecord[13] = ""         // Details
			productRecord[14] = ""         // Register
			productRecord[15] = ""         // User
			productRecord[16] = ""         // Status
			productRecord[17] = ""         // Sku
			productRecord[18] = ""         // AccountCodeSale
			productRecord[19] = ""         // AccountCodePurchase
			w.Write(productRecord)
		}

		payments := *sale.Payments
		for _, payment := range payments {

			paid := strconv.FormatFloat(*payment.Amount, 'f', -1, 64)
			name := fmt.Sprintf("%s", *payment.Name)
			// label := *payment.Label

			paymentRecord := record
			paymentRecord[0] = ""        // Sale Date
			paymentRecord[1] = ""        // Invoice Number
			paymentRecord[2] = "Payment" // Line Type
			paymentRecord[3] = ""        // Customer Code Code
			paymentRecord[4] = ""        // Customer Name Name
			paymentRecord[5] = ""        // Note TODO: line note
			paymentRecord[6] = ""        // Quantity
			paymentRecord[7] = ""        // Subtotal
			paymentRecord[8] = ""        // Sales Tax
			paymentRecord[9] = ""        // Discount
			paymentRecord[10] = ""       // Loyalty
			paymentRecord[11] = ""       // Total
			paymentRecord[12] = paid     // Paid
			paymentRecord[13] = name     //  Details
			paymentRecord[14] = ""       // Register
			paymentRecord[15] = ""       // User
			paymentRecord[16] = ""       // Status
			paymentRecord[17] = ""       // Sku
			paymentRecord[18] = ""       // AccountCodeSale
			paymentRecord[19] = ""       // AccountCodePurchase

			w.Write(paymentRecord)
		}
	}
	w.Flush()

	return err
}
